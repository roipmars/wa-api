[http]
  # Middlewares Grouping in Namespace "Middlewares"
  [http.middlewares]
    # Refer to requests a certain number of times for a back-end server if this server does not respond.
    [http.middlewares.try_retry.retry]
      # Number of attempts
      attempts = 2
      # Waiting time for a new attempt
      initialInterval = "500ms"
    # Reproducing the request with "retryExpression"
    [http.middlewares.limit_body.buffering]
      # In case of:
      # IsNetworkError(): If the response code is related to network error;
      # Attempts(): Number of attempts
      retryExpression = "IsNetworkError() && Attempts() < 2"
      # Maximum Body Size of Requisition
      # 1024 * 3 * 1000
      maxRequestBodyBytes = 3072000
    # Middleware Authentication for Dashboard Display
    [http.middlewares.dashboard_auth_traefik.basicAuth]
      #---------------------------------------------
      # Generating password
      # openssl passwd -apr1 -stdin <<< "sua_senha_1"
      #---------------------------------------------
      # user=codechat
      # pass=$apr1$/a8pff2v$lxxb/jjz0bL3GhUbtyWOV/
      # users = ["codechat:$apr1$nWn0eGv2$XT4pvuV353HeM7stkcq/B/"]
    # Authentication Middleware for Prisma Studio display
    [http.middlewares.prisma_db_auth.basicAuth]
      #---------------------------------------------
      # Generating password
      # openssl passwd -apr1 -stdin <<< "sua_senha_2"
      #---------------------------------------------
      # user=codechat
      # pass=$apr1$0.Skc2fw$l4e/9KllHQrAB.Qsmtgeu.
      # users = ["codechat:$apr1$/RFAfXKf$DjmgFM6FHQpWa6U16F6cI/"]
  # REDUNDANCY
  # [http.routers.http_catch_all]
  #   entryPoints = "web"
  #   priority = 1
  #   rule = "HostRegexp(`{host:.+}`)"
  #   service = "traefik_dashboard"
  # Intercepting all http requests that correspond to any host and directed traffic to the "Traefik Dashboard" router
  # [http.routers.catch_all]
  #   rule = "HostRegexp(`{host:.+}`)"
  #   priority = 1
  #   entryPoints = ["web"]
  #   service = "traefik_dashboard"
  ###############################################################
  ### Router and Service of "Traefik Dashboard"
  ###############################################################
  # 1. Router
  [http.routers.traefik_dashboard]
    rule = "Host(`traefik.domain.com`)"
    entryPoints = ["web_secure"]
    service = "api@internal"
    middlewares = ["dashboard_auth_traefik"]
    [http.routers.traefik_dashboard.tls]
      certresolver = "letsencrypt_resolver"

  # 2. Service
  [http.services.traefik_dashboard]
    [http.services.traefik_dashboard.loadbalancer]
      passHostHeader = true
      # In the instruction below is expected a list of servers
      # http for loadbalancer.Let's insert a list with
      # a single server.
      [[http.services.traefik_dashboard.loadbalancer.servers]]
        url = "http://127.0.0.1:80"
      # Example of another item on the list of servers
      # [[http.service.traefik_dashboard.loadbalancer.servers]]
      #   url = "http://127.0.0.1:8080"
  ###############################################################
  ### Router and service of "Studio_DB_V1"
  ###############################################################
  # 1. Router
  [http.routers.studio_db_v1]
    rule = "Host(`paneldb.domain.com`)"
    entryPoints = ["web_secure"]
    service = "studio_db_v1"
    middlewares = ["prisma_db_auth"]
    [http.routers.studio_db_v1.tls]
      certresolver = "letsencrypt_resolver"
  # 2. Service
  [http.services.studio_db_v1]
    [http.services.studio_db_v1.loadbalancer]
      passHostHeader = true
    [[http.services.studio_db_v1.loadbalancer.servers]]
      url = "http://127.0.0.1:4444"
  ###############################################################
  ### CodeChat Api V1 Router and Service
  ###############################################################
  # 1. Router
  [http.routers.codechat_api_v1]
    rule = "Host(`api.domain.com`)"
    entryPoints = ["web_secure"]
    service = "codechat_api_v1"
    middlewares = ["limit_body", "try_retry"]
    [http.routers.codechat_api_v1.tls]
      certresolver = "letsencrypt_resolver"
  # 2. Service
  [http.services.codechat_api_v1]
    [http.services.codechat_api_v1.loadbalancer]
      passHostHeader = true
    [[http.services.codechat_api_v1.loadbalancer.servers]]
      url = "http://127.0.0.1:8084"
